import { toBuffer, } from '@concordium/web-sdk';
/**
 * {@link Schema} constructor for a module schema.
 * @param schemaBase64 The raw module schema in base64 encoding.
 * @param version The schema spec version. Omit if the version is embedded into the schema.
 * @throws Error if {@link schemaBase64} is not valid base64.
 */
export function moduleSchemaFromBase64(schemaBase64, version) {
    return moduleSchema(schemaAsBuffer(schemaBase64), version);
}
/**
 * {@link Schema} constructor for a module schema.
 * @param schema The raw module schema in binary.
 * @param version The schema spec version. Omit if the version is embedded into the schema.
 */
export function moduleSchema(schema, version) {
    return {
        type: 'ModuleSchema',
        value: schema,
        version: version,
    };
}
/**
 * {@link Schema} constructor for a type schema.
 * @param schemaBase64 The raw parameter schema in base64 encoding.
 * @throws Error if {@link schemaBase64} is not valid base64.
 */
export function typeSchemaFromBase64(schemaBase64) {
    return typeSchema(schemaAsBuffer(schemaBase64));
}
/**
 * {@link Schema} constructor for a type schema.
 * @param schema The raw parameter schema in binary.
 */
export function typeSchema(schema) {
    return {
        type: 'TypeSchema',
        value: schema,
    };
}
export function schemaAsBuffer(schemaBase64) {
    let unpaddedLen = schemaBase64.length;
    if (schemaBase64.charAt(unpaddedLen - 1) === '=') {
        unpaddedLen--;
        if (schemaBase64.charAt(unpaddedLen - 1) === '=') {
            unpaddedLen--;
        }
    }
    const res = toBuffer(schemaBase64, 'base64');
    if (unpaddedLen !== Math.ceil((4 * res.length) / 3)) {
        throw new Error(`The provided schema '${schemaBase64}' is not valid base64`);
    }
    return res;
}
/**
 * {@link SignableMessage} constructor for a string message.
 * @param msg The message as a plain string.
 */
export function stringMessage(msg) {
    return {
        type: 'StringMessage',
        value: msg,
    };
}
/**
 * {@link SignableMessage} constructor for binary message.
 * @param msgHex The message represented in hexadecimal notation.
 * @param schema The schema describing the type of the binary message.
 */
export function binaryMessageFromHex(msgHex, schema) {
    return {
        type: 'BinaryMessage',
        value: messageAsBuffer(msgHex),
        schema,
    };
}
function messageAsBuffer(msgHex) {
    const res = toBuffer(msgHex, 'hex');
    // Check round-trip.
    if (res.toString('hex') !== msgHex) {
        throw new Error(`provided message '${msgHex}' is not valid hex`);
    }
    return res;
}
//# sourceMappingURL=WalletConnection.js.map