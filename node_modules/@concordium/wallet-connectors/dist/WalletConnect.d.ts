import { SendTransactionPayload } from '@concordium/browser-wallet-api-helpers';
import { AccountTransactionSignature, AccountTransactionType, CredentialStatements, VerifiablePresentation } from '@concordium/web-sdk';
import { WalletConnectModalConfig } from '@walletconnect/modal';
import { MobileWallet } from '@walletconnect/modal-core';
import SignClient from '@walletconnect/sign-client';
import { ISignClient, SessionTypes, SignClientTypes } from '@walletconnect/types';
import { Network, SignableMessage, TypedSmartContractParameters, WalletConnection, WalletConnectionDelegate, WalletConnector } from './WalletConnection';
/**
 * Describes the possible methods to invoke
 */
export declare enum WalletConnectMethod {
    SignAndSendTransaction = "sign_and_send_transaction",
    SignMessage = "sign_message",
    RequestVerifiablePresentation = "request_verifiable_presentation"
}
/**
 * Describes the possible events to listen to
 */
export declare enum WalletConnectEvent {
    ChainChanged = "chain_changed",
    AccountsChanged = "accounts_changed"
}
/**
 * Describes a mobile wallet to connect to through a wallet connect modal.
 */
export type WalletConnectModalMobileWallet = MobileWallet & {
    /** Url for an icon to represent the wallet */
    iconUrl?: string;
};
/**
 * Creates a {@linkcode WalletConnectModalConfig}.
 *
 * @param network The {@linkcode Network} to connect to.
 * @param [mobileWallets] The list of mobile wallets to use for deep linking. Defaults to the concordium and cryptoX wallets for mobile for the specified `network`.
 * If `network` is anything but {@linkcode MAINNET} or {@linkcode TESTNET}, the default value is an empty list.
 * @param [enableExplorer] Whether to enable the wallet connect explorer in the wallet connect modal. Defaults to `false`.
 *
 * @returns the corresponding {@linkcode WalletConnectModalConfig}
 */
export declare function createWalletConnectModalConfig(network: Network, mobileWallets?: WalletConnectModalMobileWallet[], enableExplorer?: boolean): WalletConnectModalConfig;
/**
 * Implementation of {@link WalletConnection} for WalletConnect v2.
 *
 * While WalletConnect doesn't set any restrictions on the amount of accounts and networks/chains
 * that can be associated with a single connection,
 * this implementation assumes that there is at least one and always use only the first one in the list.
 *
 * It also assumes that the network/chain is fixed to the one provided to {@link WalletConnector}.
 */
export declare class WalletConnectConnection implements WalletConnection {
    readonly connector: WalletConnectConnector;
    readonly chainId: string;
    session: SessionTypes.Struct;
    constructor(connector: WalletConnectConnector, chainId: string, session: SessionTypes.Struct);
    getConnector(): WalletConnectConnector;
    ping(): Promise<void>;
    /**
     * @return The account that the wallet currently associates with this connection.
     */
    getConnectedAccount(): string;
    signAndSendTransaction(accountAddress: string, type: AccountTransactionType, payload: SendTransactionPayload, typedParams?: TypedSmartContractParameters): Promise<string>;
    signMessage(accountAddress: string, msg: SignableMessage): Promise<AccountTransactionSignature>;
    requestVerifiablePresentation(challenge: string, credentialStatements: CredentialStatements): Promise<VerifiablePresentation>;
    disconnect(): Promise<void>;
}
/**
 * Describes the configuration of a connection to a wallet through wallet connect
 */
export type WalletConnectNamespaceConfig = {
    /** Which methods to request permission for */
    methods: WalletConnectMethod[];
    /** Which events to request permission for */
    events: WalletConnectEvent[];
};
/**
 * Implementation of {@link WalletConnector} for WalletConnect v2.
 *
 * In relation to the interface it implements, this class imposes the restriction that all connections it initiates
 * must live on the chain/network that the connector was created with.
 * The connected wallet is assumed to respect this rule.
 */
export declare class WalletConnectConnector implements WalletConnector {
    readonly client: ISignClient;
    readonly chainId: string;
    readonly delegate: WalletConnectionDelegate;
    readonly connections: Map<string, WalletConnectConnection>;
    readonly modalConfig: WalletConnectModalConfig;
    readonly namespaceConfig: WalletConnectNamespaceConfig;
    /**
     * Construct a new instance.
     *
     * Use {@link create} to have the sign client initialized from {@link SignClientTypes.Options}
     * to not have to do it manually.
     *
     * The constructor sets up event handling and appropriate forwarding to the provided delegate.
     *
     * @param client The underlying WalletConnect client.
     * @param delegate The object to receive events emitted by the client.
     * @param network The network/chain that connected accounts must live on.
     * @param [namespaceConfig] The namespace configuration of the connections, i.e. which methods and events to request permission for in the wallet. Defaults to {@linkcode FULL_WALLET_CONNECT_NAMESPACE_CONFIG}
     * @param [modalConfig] The configuration of the modal for connecting to the mobile wallet. Defaults to the default invocation of {@linkcode createWalletConnectModalConfig}
     */
    constructor(client: SignClient, delegate: WalletConnectionDelegate, network: Network, namespaceConfig?: WalletConnectNamespaceConfig, modalConfig?: WalletConnectModalConfig);
    /**
     * Convenience function for creating a new instance from WalletConnection configuration instead of an already initialized client.
     *
     * @param signClientInitOpts WalletConnect configuration.
     * The constant {@link CONCORDIUM_WALLET_CONNECT_PROJECT_ID} exported by this library may be used as {@link SignClientTypes.Options.projectId projectID}
     * if the dApp doesn't have its own {@link https://cloud.walletconnect.com WalletConnect Cloud} project.
     * @param delegate The object to receive events emitted by the client.
     * @param network The network/chain that connected accounts must live on.
     * @param [namespaceConfig] The namespace configuration of the connections, i.e. which methods and events to request permission for in the wallet. Defaults to {@linkcode FULL_WALLET_CONNECT_NAMESPACE_CONFIG}
     * @param [modalConfig] The configuration of the modal for connecting to the mobile wallet. Defaults to the default invocation of {@linkcode createWalletConnectModalConfig}
     */
    static create(signClientInitOpts: SignClientTypes.Options, delegate: WalletConnectionDelegate, network: Network, namespaceConfig?: WalletConnectNamespaceConfig, modalConfig?: WalletConnectModalConfig): Promise<WalletConnectConnector>;
    connect(): Promise<WalletConnectConnection | undefined>;
    onDisconnect(connection: WalletConnectConnection): void;
    getConnections(): WalletConnectConnection[];
    /**
     * Disconnect all connections.
     */
    disconnect(): Promise<void>;
}
//# sourceMappingURL=WalletConnect.d.ts.map