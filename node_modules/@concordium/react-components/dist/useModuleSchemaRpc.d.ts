import { Schema } from '@concordium/wallet-connectors';
import { ConcordiumGRPCClient } from '@concordium/web-sdk';
/**
 * The result of extracting a smart contract {@link Schema} from a WebAssembly module.
 */
export interface SchemaResult {
    /**
     * The name of the custom section in which the schema was found.
     */
    sectionName: string;
    /**
     * The resolved schema.
     */
    schema: Schema;
}
/**
 * Hook for resolving the {@link Schema} of a smart contract module from the chain.
 * The schema may be used to construct the payload of invocations of smart contracts that are instances of this module.
 * @param rpc gRPC client through which to perform the lookup.
 * @param moduleRef The reference of the module for which to lookup.
 * @param setError Function that is invoked with any error that occurred while resolving the schema (e.g. module was not found or it was malformed).
 * @return The schema wrapped into a {@link SchemaResult} or undefined if no schema was found.
 */
export declare function useModuleSchemaRpc(rpc: ConcordiumGRPCClient, moduleRef: string, setError: (err: string) => void): SchemaResult | undefined;
//# sourceMappingURL=useModuleSchemaRpc.d.ts.map