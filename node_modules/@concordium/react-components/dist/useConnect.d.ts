import { WalletConnection, WalletConnector } from '@concordium/wallet-connectors';
/**
 * The state of the a {@link useConnect} instance.
 */
export interface Connect {
    /**
     * Function for initiating a new connection using the provided connector or undefined if none was provided.
     * Any existing connection will not be automatically disconnected by calling the function.
     */
    connect: (() => void) | undefined;
    /**
     * Indicator on whether we're waiting for a connection to be established and approved.
     */
    isConnecting: boolean;
    /**
     * Error establishing the connection.
     */
    connectError: string;
}
/**
 * Hook that exposes a function for initiating a connection on the provided {@link connector} and,
 * if successful, store the resulting connection in {@link setConnection}.
 * The hook also exposes the status of the connection progress and an error if initiation failed.
 * @param connector The connector from which new connections are to be initiated.
 * @param setConnection The setter function to which new connections are passed.
 */
export declare function useConnect(connector: WalletConnector | undefined, setConnection: (c: WalletConnection) => void): Connect;
//# sourceMappingURL=useConnect.d.ts.map