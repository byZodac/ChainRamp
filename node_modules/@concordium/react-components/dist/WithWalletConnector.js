var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Component } from 'react';
import { errorString } from './error';
/**
 * Produce a {@link ConnectorType} that creates a new connector instance on activation
 * and disconnects the existing one on deactivation.
 * This is the simplest connection type and should be used unless there's a reason not to.
 * @param create Factory function for creating new connector instances.
 */
export function ephemeralConnectorType(create) {
    return {
        activate: create,
        deactivate: (w, c) => c.disconnect(),
    };
}
/**
 * Produce a {@link ConnectorType} that reuse connectors between activation cycles.
 * That is, once a connector is created, it's never automatically disconnected.
 * Note that only the connector is permanent. Individual connections may still be disconnected by the application.
 * @param create Factory function for creating new connector instances.
 */
export function persistentConnectorType(create) {
    const connectorPromises = new Map();
    return {
        activate: (component, network) => {
            const delegateConnectorPromises = connectorPromises.get(component) || new Map();
            connectorPromises.set(component, delegateConnectorPromises);
            const connectorPromise = delegateConnectorPromises.get(network) || create(component, network);
            delegateConnectorPromises.set(network, connectorPromise);
            return connectorPromise;
        },
        deactivate: () => __awaiter(this, void 0, void 0, function* () { return undefined; }),
    };
}
function updateMapEntry(map, key, value) {
    const res = new Map(map);
    if (key !== undefined) {
        if (value !== undefined) {
            res.set(key, value);
        }
        else {
            res.delete(key);
        }
    }
    return res;
}
/**
 * React component that helps managing wallet connections
 * by introducing a notion of "active" {@link WalletConnector} and {@link WalletConnection},
 * and maintaining their states as part of its own component state.
 * This allows child components to access all relevant information in a reactive manner
 * and provides methods for managing the active connection.
 *
 * The component implements {@link WalletConnectionDelegate} and passes itself to all {@link WalletConnector}s
 * that it initializes.
 * This allows it to receive events from the underlying clients.
 * Once it receives an event for the active {@link WalletConnection},
 * it performs the relevant updates to its component state which then bubble down to child components.
 *
 * This component significantly reduces the complexity of integrating with wallets,
 * even if one only needs to support a single protocol and network.
 */
// TODO Rename to WalletConnectionManager?
export class WithWalletConnector extends Component {
    constructor(props) {
        super(props);
        /**
         * @see WalletConnectionProps.setActiveConnectorType
         */
        this.setActiveConnectorType = (type) => {
            console.debug("WithWalletConnector: calling 'setActiveConnectorType'", { type, state: this.state });
            const { network } = this.props;
            const { activeConnectorType, activeConnector } = this.state;
            this.setState({
                activeConnectorType: type,
                activeConnector: undefined,
                activeConnectorError: '',
            });
            if (activeConnectorType && activeConnector) {
                activeConnectorType.deactivate(this, activeConnector).catch((err) => this.setState((state) => {
                    // Don't set error if user switched connector type since initializing this connector.
                    // It's OK to show it if the user switched away and back...
                    if (state.activeConnectorType !== type) {
                        return state;
                    }
                    return Object.assign(Object.assign({}, state), { activeConnectorError: errorString(err) });
                }));
            }
            if (type) {
                type.activate(this, network)
                    .then((connector) => {
                    console.log('WithWalletConnector: setting active connector', { connector });
                    // Switch the connector (type) back in case the user changed it since initiating the connection.
                    this.setState({ activeConnectorType: type, activeConnector: connector, activeConnectorError: '' });
                })
                    .catch((err) => this.setState((state) => {
                    if (state.activeConnectorType !== type) {
                        return state;
                    }
                    return Object.assign(Object.assign({}, state), { activeConnectorError: errorString(err) });
                }));
            }
        };
        this.onAccountChanged = (connection, address) => {
            console.debug("WithWalletConnector: calling 'onAccountChanged'", { connection, address, state: this.state });
            this.setState((state) => (Object.assign(Object.assign({}, state), { connectedAccounts: updateMapEntry(state.connectedAccounts, connection, address || '') })));
        };
        this.onChainChanged = (connection, genesisHash) => {
            console.debug("WithWalletConnector: calling 'onChainChanged'", { connection, genesisHash, state: this.state });
            this.setState((state) => (Object.assign(Object.assign({}, state), { genesisHashes: updateMapEntry(state.genesisHashes, connection, genesisHash) })));
        };
        this.onConnected = (connection, address) => {
            console.debug("WithWalletConnector: calling 'onConnected'", { connection, state: this.state });
            this.onAccountChanged(connection, address);
        };
        this.onDisconnected = (connection) => {
            console.debug("WithWalletConnector: calling 'onDisconnected'", { connection, state: this.state });
            this.setState((state) => (Object.assign(Object.assign({}, state), { connectedAccounts: updateMapEntry(state.connectedAccounts, connection, undefined) })));
        };
        this.state = {
            activeConnectorType: undefined,
            activeConnector: undefined,
            activeConnectorError: '',
            genesisHashes: new Map(),
            connectedAccounts: new Map(),
        };
    }
    render() {
        const { children, network } = this.props;
        return children(Object.assign(Object.assign({}, this.state), { network, setActiveConnectorType: this.setActiveConnectorType }));
    }
    componentDidUpdate(prevProps) {
        if (prevProps.network !== this.props.network) {
            // Reset active connector and connection when user changes network.
            // In the future there may be a mechanism for negotiating with the wallet.
            this.setActiveConnectorType(undefined);
        }
    }
    componentWillUnmount() {
        // TODO Disconnect everything?
    }
}
//# sourceMappingURL=WithWalletConnector.js.map