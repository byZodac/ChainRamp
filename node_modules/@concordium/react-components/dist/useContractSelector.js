var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ContractAddress, ContractName, ReceiveName, } from '@concordium/web-sdk';
import { useEffect, useState } from 'react';
import { errorString } from './error';
function refresh(rpc, index) {
    return __awaiter(this, void 0, void 0, function* () {
        const info = yield rpc.getInstanceInfo(ContractAddress.create(index, BigInt(0)));
        if (!info) {
            throw new Error(`contract ${index} not found`);
        }
        const { version, name, owner, amount, methods, sourceModule } = info;
        return {
            version,
            index,
            name: ContractName.fromInitName(name).value,
            amount,
            owner,
            methods: methods.map(ReceiveName.toString),
            moduleRef: sourceModule.moduleRef,
        };
    });
}
function parseContractIndex(input) {
    try {
        return BigInt(input);
    }
    catch (e) {
        throw new Error(`invalid contract index '${input}'`);
    }
}
function loadContract(rpc, input) {
    return __awaiter(this, void 0, void 0, function* () {
        const index = parseContractIndex(input);
        return refresh(rpc, index);
    });
}
/**
 * React hook to look up a smart contract's data and state from its index.
 * @param rpc gRPC client through which to perform the lookup.
 * @param input The index of the contract to look up.
 * @return The resolved contract and related state.
 */
export function useContractSelector(rpc, input) {
    const [selected, setSelected] = useState();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    useEffect(() => {
        setSelected(undefined);
        setError('');
        if (rpc && input) {
            setIsLoading(true);
            loadContract(rpc, input)
                .then(setSelected)
                .catch((err) => {
                setError(errorString(err));
                setSelected(undefined); // prevents race condition against an ongoing successful query
            })
                .finally(() => setIsLoading(false));
        }
    }, [rpc, input]);
    return { selected, isLoading, error };
}
//# sourceMappingURL=useContractSelector.js.map